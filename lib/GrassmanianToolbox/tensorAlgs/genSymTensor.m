function A = genSymTensor(varargin)
% Generates random symmetric tensor or order-k and
% with dimensions n, or symmetric order-k tensor of 
% rank(r) with (non-symmetric) noise amount rho.
% A = genSymTensor(n,k)
% A = genSymTensor(n,k,r,rho)
%
% Copyright 2009.
% Berkant Savas, Linköping University.

%% Generate tensor:
switch nargin
    case 2
        n = varargin{1};
        k = varargin{2};        
        if k == 3
            A = randn(n,n,n);
            A = permute(A,[1,3,2]) + ...
                permute(A,[2,1,3]) + ...
                permute(A,[2,3,1]) + ...
                permute(A,[3,1,2]) + ...
                permute(A,[3,2,1]) + A;
            A = tensor(A)/6;
        elseif k == 4
            A = randn(n,n,n,n);
            A = A + ...
                permute(A,[1,2,4,3]) + ...
                permute(A,[1,3,2,4]) + ...
                permute(A,[1,3,4,2]) + ...
                permute(A,[1,4,2,3]) + ...
                permute(A,[1,4,3,2]) + ...
                permute(A,[2,1,3,4]) + ...
                permute(A,[2,1,4,3]) + ...
                permute(A,[2,3,1,4]) + ...
                permute(A,[2,3,4,1]) + ...
                permute(A,[2,4,1,3]) + ...
                permute(A,[2,4,3,1]) + ...
                permute(A,[3,1,2,4]) + ...
                permute(A,[3,1,4,2]) + ...
                permute(A,[3,2,1,4]) + ...
                permute(A,[3,2,4,1]) + ...
                permute(A,[3,4,1,2]) + ...
                permute(A,[3,4,2,1]) + ...
                permute(A,[4,1,2,3]) + ...
                permute(A,[4,1,3,2]) + ...
                permute(A,[4,2,1,3]) + ...
                permute(A,[4,2,3,1]) + ...
                permute(A,[4,3,1,2]) + ...
                permute(A,[4,3,2,1]);
            A = tensor(A/24);
        end
    case 4
        n = varargin{1};
        k = varargin{2};
        r = varargin{3};
        rho = varargin{4};               
        if k == 3
            C = randn(r,r,r);
            C = C + ...
                permute(C,[1,3,2]) + ...
                permute(C,[2,1,3]) + ...
                permute(C,[2,3,1]) + ...
                permute(C,[3,1,2]) + ...
                permute(C,[3,2,1]);
            C = tensor(C/6);
            X = orth(randn(n,r));
            A = ttm(C,{X,X,X}) + tensor(rho*randn(n,n,n));
        elseif k == 4
            C = randn(r,r,r,r);
            C = C + ...
                permute(C,[1,2,4,3]) + ...
                permute(C,[1,3,2,4]) + ...
                permute(C,[1,3,4,2]) + ...
                permute(C,[1,4,2,3]) + ...
                permute(C,[1,4,3,2]) + ...
                permute(C,[2,1,3,4]) + ...
                permute(C,[2,1,4,3]) + ...
                permute(C,[2,3,1,4]) + ...
                permute(C,[2,3,4,1]) + ...
                permute(C,[2,4,1,3]) + ...
                permute(C,[2,4,3,1]) + ...
                permute(C,[3,1,2,4]) + ...
                permute(C,[3,1,4,2]) + ...
                permute(C,[3,2,1,4]) + ...
                permute(C,[3,2,4,1]) + ...
                permute(C,[3,4,1,2]) + ...
                permute(C,[3,4,2,1]) + ...
                permute(C,[4,1,2,3]) + ...
                permute(C,[4,1,3,2]) + ...
                permute(C,[4,2,1,3]) + ...
                permute(C,[4,2,3,1]) + ...
                permute(C,[4,3,1,2]) + ...
                permute(C,[4,3,2,1]);
            C = tensor(C/24);
            X = orth(randn(n,r));
            A = ttm(C,{X,X,X,X}) + tensor(rho*randn(n,n,n,n));
        end            
    otherwise
        error('Input arrguments are not correct.')
end